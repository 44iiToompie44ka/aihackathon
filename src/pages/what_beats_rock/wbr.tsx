import React, { useState } from 'react';
import { OpenAI } from 'openai';

const initialItem = { emoji: 'ü™®', name: '–ö–∞–º–µ–Ω—å' };

const WBR: React.FC = () => {
  const [currentItem, setCurrentItem] = useState(initialItem);
  const [input, setInput] = useState('');
  const [score, setScore] = useState(0);
  const [isGameOver, setIsGameOver] = useState(false);
  const [loading, setLoading] = useState(false);

  const openai = new OpenAI({
    apiKey: "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",
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    setLoading(true);

    try {
      const prompt = `
        –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç: ${currentItem.name} (${currentItem.emoji}).
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: ${input.trim()}.
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ:
        1. –ü–æ–±–µ–∂–¥–∞–µ—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?
        2. –ï—Å–ª–∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ] ([—ç–º–æ–¥–∑–∏]).
        –ï—Å–ª–∏ –Ω–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç".
      `;

      const response = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [{ role: 'user', content: prompt }],
      });

      const result = response.choices[0]?.message?.content || '';
      if (result.includes('–ù–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç')) {
        setIsGameOver(true);
      } else {
        const match = /–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: (.+) \((.+)\)/i.exec(result);
        const newItem = match
          ? { name: match[1], emoji: match[2] }
          : { name: '???', emoji: '‚ùì' };

        setCurrentItem(newItem);
        setScore((prev) => prev + 1);
      }
    } catch (error) {
      console.error('Error fetching OpenAI response:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setLoading(false);
      setInput('');
    }
  };

  const restartGame = () => {
    setCurrentItem(initialItem);
    setScore(0);
    setIsGameOver(false);
    setInput('');
  };

  return (
    <div style={{ textAlign: 'center', padding: '20px' }}>
      <h1>–ß—Ç–æ –±—å—ë—Ç –∫–∞–º–µ–Ω—å?</h1>
      {isGameOver ? (
        <div>
          <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
          <p>–í–∞—à —Å—á—ë—Ç: {score}</p>
          <button onClick={restartGame}>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
        </div>
      ) : (
        <div>
          <div style={{ fontSize: '100px' }}>{currentItem.emoji}</div>
          <p>{`–ß—Ç–æ –±—å—ë—Ç —ç—Ç–æ—Ç ${currentItem.name}?`}</p>
          <input
            type="text"
            value={input}
            onChange={handleInputChange}
            placeholder="–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç"
            disabled={loading}
          />
          <button onClick={handleSend} disabled={loading}>
            {loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
          </button>
          <p>–°—á—ë—Ç: {score}</p>
        </div>
      )}
    </div>
  );
};

export default WBR;
